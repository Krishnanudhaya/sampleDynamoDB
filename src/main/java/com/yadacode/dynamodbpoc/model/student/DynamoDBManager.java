package com.yadacode.dynamodbpoc.model.student;/*
package com.yadacode.dynamodbpoc.model.student;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;

import java.util.Date;

public class DynamoDBManager {

    private static DynamoDBMapper dynamoDBMapper;

    public static synchronized DynamoDBMapper getInstance(AmazonDynamoDB dynamoDBClient) {
        if (dynamoDBMapper == null) {
            DynamoDBMapperConfig mapperConfig = new DynamoDBMapperConfig.Builder()
                    .withSaveBehavior(DynamoDBMapperConfig.SaveBehavior.CLOBBER)
                    .withTableNameResolver(new DynamoDBMapperConfig.TableNameResolver() {
                        @Override
                        public String getTableName(Class<?> clazz, DynamoDBMapperConfig config) {
                            return "student1";
                        }
                    })
                    .withConversionSchema(ConversionSchemas.V2)
                    .build();

            dynamoDBMapper = new DynamoDBMapper(dynamoDBClient, mapperConfig);
        }
        return dynamoDBMapper;
    }

    public static class ExcludeOnCreateAutoGenerate implements DynamoDBAutoGenerator<Date> {

        @Override
        public DynamoDBAutoGenerateStrategy getGenerateStrategy() {
            System.out.println("krish !!!");
            return null;
        }

        @Override
        public Date generate(Date currentValue) {
            if (currentValue != null) {
                // Field is already set, return the current value
                return currentValue;
            } else {
                // Field is not set, return null to exclude the field during creation
                return null;
            }
        }
    }


}
*/

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;

import java.util.Date;

public class DynamoDBManager {

    private static DynamoDBMapper dynamoDBMapper;

    public static synchronized DynamoDBMapper getInstance(AmazonDynamoDB dynamoDBClient) {
        if (dynamoDBMapper == null) {
            DynamoDBMapperConfig mapperConfig = new DynamoDBMapperConfig.Builder()
                    .withSaveBehavior(DynamoDBMapperConfig.SaveBehavior.CLOBBER)
                    .withTableNameResolver(new DynamoDBMapperConfig.TableNameResolver() {
                        @Override
                        public String getTableName(Class<?> clazz, DynamoDBMapperConfig config) {
                            return "YourTableName";
                        }
                    })
                    .withConversionSchema(ConversionSchemas.V2)
                    .build();

            dynamoDBMapper = new DynamoDBMapper(dynamoDBClient, mapperConfig);
        }
        return dynamoDBMapper;
    }

    public static class UpdatedOnAutoGenerator implements DynamoDBAutoGenerator<Date> {

        private boolean updateFlag=true;

        public UpdatedOnAutoGenerator() {
        }

        public UpdatedOnAutoGenerator(boolean updateFlag) {
            this.updateFlag = updateFlag;
        }

        @Override
        public DynamoDBAutoGenerateStrategy getGenerateStrategy() {
            return DynamoDBAutoGenerateStrategy.CREATE ;
        }

        @Override
        public Date generate(Date currentValue) {
            if (updateFlag) {
                System.out.println("updateFlag value::"+new Date());
                return new Date();
            }
            System.out.println("current value::"+currentValue);
            return currentValue;
        }
    }

   /* public static class MyEntity {

        private Date updatedOn;

        @DynamoDBAutoGenerated(generator = UpdatedOnAutoGenerator.class)
        @DynamoDBAttribute
        public Date getUpdatedOn() {
            return updatedOn;
        }

        public void setUpdatedOn(Date updatedOn) {
            this.updatedOn = updatedOn;
        }

        public void setUpdatedOn(Date updatedOn, boolean updateFlag) {
            if (updateFlag) {
                this.updatedOn = updatedOn;
            }
        }
    }*/
}

